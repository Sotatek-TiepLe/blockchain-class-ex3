{"version":3,"sources":["utils/connect.js","features/connectWallet/index.jsx","functions/contract.js","utils/const.js","functions/format.js","features/popupAction/index.jsx","features/Stake/index.jsx","hooks/listener.js","App.js","index.js"],"names":["injected","InjectedConnector","supportedChainIds","walletConnect","WalletConnectConnector","rpc","qrcode","SC_MasterChef","CHAIN_LIST","ConnectWallet","activate","useWeb3React","useState","modal","setModal","toggle","connector","target","Button","color","size","onClick","Modal","isOpen","centered","ModalHeader","ModalBody","Row","className","Col","block","getContractWETH","library","Contract","ABI_WETH","getSigner","getContractMasterChef","ABI_MasterChef","getContractDD2","ABI_DD2","KEY","formatAmount","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","PopupAction","title","currency","balance","show","onToggle","onSubmit","closeBtn","value","setValue","useEffect","close","InputGroup","Input","type","max","placeholder","onChange","e","InputGroupAddon","addonType","format","ModalFooter","disabled","length","Message","setting","key","msg","Alert","PopupStake","props","PopupWithdraw","Stake","chainId","account","deactivate","isApprove","setIsApprove","setMsg","clearBigNumber","BigNumber","from","balanceWETH","setBalanceWETH","balanceDD2","setBalanceDD2","pendingDD2","setPendingDD2","yourStakeWETH","setYourStakeWETH","totalStakeWETH","setTotalStakeWETH","harvesting","setHarvesting","approving","setApproving","staking","setStaking","withdrawing","setWithdrawing","showStake","setShowStake","showWithdraw","setShowWithdraw","triedEager","active","tried","setTried","isAuthorized","then","undefined","catch","useEagerConnect","suppress","error","ethereum","window","on","handleConnect","console","log","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","showMessage","content","setTimeout","showMessageSuccess","showMessageError","getBalanceWETH","a","myContract","balanceOf","getBalanceDD2","getPendingDD2","pending","getYourStake","userInfo","amount","getTotalStake","onClickHarvest","withdraw","res","wait","err","stack","stateUpdate","Promise","all","getAllowance","yourStake","totalStake","allowance","formatEther","onClickApprove","approve","toString","wethSC","toggleStake","toggleWithdraw","onSubmitStake","deposit","parseUnits","onSubmitWithdraw","Container","Card","CardHeader","CardBody","sm","slice","Badge","href","xs","Spinner","ListGroup","horizontal","ListGroupItem","action","eq","Math","round","Number","getLibrary","provider","Web3Provider","pollingInterval","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.341319fd.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\n\n// Connect wallet\nexport const injected = new InjectedConnector({ supportedChainIds: [4] });\nexport const walletConnect = new WalletConnectConnector({\n\trpc: {\n\t\t// 1: \"https://mainnet.infura.io/v3/c9f9eba874a24d339db4c886f6964321\",\n\t\t4: \"https://rinkeby.infura.io/v3/c9f9eba874a24d339db4c886f6964321\"\n\t},\n\tqrcode: true\n});\n\n// Address\nexport const SC_WETH = \"0xc778417E063141139Fce010982780140Aa0cD5Ab\";\nexport const SC_MasterChef = \"0x9da687e88b0A807e57f1913bCD31D56c49C872c2\";\nexport const SC_DD2 = \"0xb1745657CB84c370DD0Db200a626d06b28cc5872\";\n\n// Chain\nexport const CHAIN_LIST = {\n\t1: \"Ethereum\",\n\t2: \"Morden (disused), Expanse mainnet\",\n\t3: \"Ropsten\",\n\t4: \"Rinkeby\",\n\t5: \"Goerli\"\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useWeb3React } from \"@web3-react/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Col, Modal, ModalHeader, ModalBody, Row } from \"reactstrap\";\nimport { injected, walletConnect } from \"utils/connect\";\n\nexport default function ConnectWallet() {\n\tconst web3React = useWeb3React();\n\tconst { activate } = web3React;\n\tconst [modal, setModal] = useState(false);\n\tconst toggle = (connector) => {\n\t\tconnector && !connector?.target && activate(connector);\n\t\tsetModal(!modal);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Button color=\"primary\" size=\"sm\" onClick={toggle}>\n\t\t\t\tConnect wallet\n\t\t\t</Button>\n\n\t\t\t<Modal isOpen={modal} toggle={toggle} centered>\n\t\t\t\t<ModalHeader toggle={toggle}>Connect with ...</ModalHeader>\n\t\t\t\t<ModalBody>\n\t\t\t\t\t<Row className=\"justify-content-center g-4\">\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\tcolor=\"warning\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\ttoggle(injected);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tMetaMask\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\ttoggle(walletConnect);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tWalletConnect\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</ModalBody>\n\t\t\t</Modal>\n\t\t</>\n\t);\n}\n","import { Contract } from '@ethersproject/contracts';\nimport { SC_DD2, SC_MasterChef, SC_WETH } from 'utils/connect';\nimport ABI_DD2 from 'ABI/DD2';\nimport ABI_MasterChef from 'ABI/MasterChef';\nimport ABI_WETH from 'ABI/WETH';\n\nexport const getContractWETH = (library) => {\n  return new Contract(\n    SC_WETH,\n    ABI_WETH,\n    library.getSigner()\n  );\n}\n\nexport const getContractMasterChef = (library) => {\n  return new Contract(\n    SC_MasterChef,\n    ABI_MasterChef,\n    library.getSigner()\n  );\n}\n\nexport const getContractDD2 = (library) => {\n  return new Contract(\n    SC_DD2,\n    ABI_DD2,\n    library.getSigner()\n  );\n}","export const KEY = {\n  ERROR: \"ERROR\",\n  SUCCESS: \"SUCCESS\"\n}","export const formatAmount = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4,\n});\n","import { formatAmount } from \"functions/format\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n\tButton,\n\tCol,\n\tInput,\n\tInputGroup,\n\tInputGroupAddon,\n\tModal,\n\tModalBody,\n\tModalFooter,\n\tModalHeader,\n\tRow,\n} from \"reactstrap\";\n\nexport default function PopupAction({\n\ttitle,\n\tcurrency,\n\tbalance,\n\tshow,\n\tonToggle,\n\tonSubmit,\n}) {\n\tconst closeBtn = (\n\t\t<button className=\"close\" onClick={onToggle}>\n\t\t\t&times;\n\t\t</button>\n\t);\n\tconst [value, setValue] = useState(\"\");\n\tconst onClickMax = (e) => {\n\t\tsetValue(balance);\n\t};\n\n\tuseEffect(() => {\n\t\t// Reset value when close popup\n\t\tsetValue(\"\");\n\t}, [show]);\n\n\treturn (\n\t\t<Modal isOpen={show} toggle={onToggle} centered>\n\t\t\t<ModalHeader toggle={onToggle} close={closeBtn}>\n\t\t\t\t{title}\n\t\t\t</ModalHeader>\n\t\t\t<ModalBody>\n\t\t\t\t<Row className=\"justify-content-center\">\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<InputGroup>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tmax={balance}\n\t\t\t\t\t\t\t\tplaceholder=\"Input balance\"\n\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tsetValue(e.target.value);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<InputGroupAddon addonType=\"append\">\n\t\t\t\t\t\t\t\t<Button onClick={onClickMax}>Max</Button>\n\t\t\t\t\t\t\t</InputGroupAddon>\n\t\t\t\t\t\t</InputGroup>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\tYou balance: <b>{formatAmount.format(balance)}</b> {currency}\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</ModalBody>\n\t\t\t<ModalFooter>\n\t\t\t\t<Button\n\t\t\t\t\tdisabled={value.length === 0}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonSubmit(value);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{title}\n\t\t\t\t</Button>{\" \"}\n\t\t\t\t<Button color=\"secondary\" onClick={onToggle}>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</ModalFooter>\n\t\t</Modal>\n\t);\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Row,\n  Spinner,\n} from 'reactstrap';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useWeb3React } from '@web3-react/core';\nimport ConnectWallet from 'features/connectWallet';\nimport { useEagerConnect, useInactiveListener } from 'hooks/listener';\nimport {\n  getContractDD2,\n  getContractMasterChef,\n  getContractWETH,\n} from 'functions/contract';\nimport { CHAIN_LIST, SC_MasterChef } from 'utils/connect';\nimport { KEY } from 'utils/const';\nimport PopupAction from 'features/popupAction';\nimport { formatAmount } from 'functions/format';\nimport { formatEther, parseUnits } from '@ethersproject/units';\n\nfunction Message({ setting }) {\n  const { show, key, msg } = setting;\n  return (\n    show && (\n      <Alert color={key === KEY.SUCCESS ? 'success' : 'danger'}>{msg}</Alert>\n    )\n  );\n}\n\nfunction PopupStake(props) {\n  return <PopupAction title=\"Stake\" {...props} currency=\"WETH\" />;\n}\n\nfunction PopupWithdraw(props) {\n  return <PopupAction title=\"Withdraw\" {...props} currency=\"DD2\" />;\n}\n\nfunction Stake(props) {\n  const { chainId, library, account, deactivate } = useWeb3React();\n  const [isApprove, setIsApprove] = useState(false);\n  const [msg, setMsg] = useState({\n    show: false,\n    type: null,\n    msg: '',\n  });\n  const clearBigNumber = BigNumber.from(0);\n  const [balanceWETH, setBalanceWETH] = useState(clearBigNumber);\n  const [balanceDD2, setBalanceDD2] = useState(clearBigNumber);\n  const [pendingDD2, setPendingDD2] = useState(clearBigNumber);\n  const [yourStakeWETH, setYourStakeWETH] = useState(clearBigNumber);\n  const [totalStakeWETH, setTotalStakeWETH] = useState(clearBigNumber);\n  // Loading\n  const [harvesting, setHarvesting] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [staking, setStaking] = useState(false);\n  const [withdrawing, setWithdrawing] = useState(false);\n  // Popup\n  const [showStake, setShowStake] = useState(false);\n  const [showWithdraw, setShowWithdraw] = useState(false);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager);\n\n  // App\n  const showMessage = (key, content) => {\n    setMsg({\n      ...msg,\n      show: true,\n      key,\n      msg: content,\n    });\n\n    setTimeout(() => {\n      setMsg({\n        ...msg,\n        show: false,\n      });\n    }, 4000);\n  };\n  const showMessageSuccess = (content) => {\n    showMessage(KEY.SUCCESS, content);\n  };\n  const showMessageError = (content) => {\n    showMessage(KEY.ERROR, content);\n  };\n\n  /**\n   * Get balance WETH\n   * @returns BigNumber\n   */\n  const getBalanceWETH = async () => {\n    const myContract = getContractWETH(library);\n    const balance = await myContract.balanceOf(account);\n    return balance;\n  };\n\n  /**\n   * Get balance WETH\n   * @returns BigNumber\n   */\n  const getBalanceDD2 = async () => {\n    const myContract = getContractDD2(library);\n    const balance = await myContract.balanceOf(account);\n    return balance;\n  };\n\n  /**\n   * Get Pending DD2\n   * @returns BigNumber\n   */\n  const getPendingDD2 = async () => {\n    const myContract = getContractMasterChef(library);\n    const pending = await myContract.pendingDD2(account);\n    return pending;\n  };\n\n  /**\n   * Get your stake (WETH)\n   * @returns\n   */\n  const getYourStake = async () => {\n    const myContract = getContractMasterChef(library);\n    const balance = await myContract.userInfo(account);\n    debugger;\n    return balance.amount;\n  };\n\n  /**\n   * Total stake (WETH)\n   */\n  const getTotalStake = async () => {\n    const myContract = getContractWETH(library);\n    const balance = await myContract.balanceOf(SC_MasterChef);\n    return balance;\n  };\n\n  /**\n   * Harvest DD2\n   */\n  const onClickHarvest = async () => {\n    setHarvesting(true);\n    const myContract = getContractMasterChef(library);\n    await myContract\n      .withdraw(0)\n      .then(async (res) => {\n        await res.wait();\n        setHarvesting(false);\n        showMessageSuccess('Harvest success !');\n      })\n      .catch((err) => {\n        showMessageError(err.stack);\n        setHarvesting(false);\n      });\n  };\n\n  const renderAccount = () => {\n    return account ? account.slice(0, 6) + '...' + account.slice(-4) : '';\n  };\n\n  // Init\n  const stateUpdate = harvesting && approving && staking && withdrawing;\n  // Updating\n  useEffect(() => {\n    (async function () {\n      //\n      if (\n        // Init app\n        (library && !stateUpdate) ||\n        // Or updated\n        stateUpdate\n      ) {\n        const [\n          balanceWETH,\n          balanceDD2,\n          pendingDD2,\n          yourStake,\n          totalStake,\n          allowance,\n        ] = await Promise.all([\n          getBalanceWETH(),\n          getBalanceDD2(),\n          getPendingDD2(),\n          getYourStake(),\n          getTotalStake(),\n          getAllowance(),\n        ]);\n        setBalanceWETH(balanceWETH);\n        setBalanceDD2(balanceDD2);\n        setPendingDD2(pendingDD2);\n        setYourStakeWETH(yourStake);\n        setTotalStakeWETH(totalStake);\n        setIsApprove(formatEther(allowance) > 0);\n      }\n      if (!account) {\n        setBalanceWETH(clearBigNumber);\n        setBalanceDD2(clearBigNumber);\n        setPendingDD2(clearBigNumber);\n        setYourStakeWETH(clearBigNumber);\n        setTotalStakeWETH(clearBigNumber);\n      }\n    })();\n  }, [account, library, chainId, harvesting, approving, staking, withdrawing]);\n\n  /**\n   * Approve MasterChef use WETH\n   * @param {*} e\n   */\n  const onClickApprove = async (e) => {\n    // UI\n    setApproving(true);\n    // Call\n    const myContract = getContractWETH(library);\n    // Sent\n    myContract\n      .approve(SC_MasterChef, balanceWETH.toString())\n      .then(async (res) => {\n        await res.wait();\n        showMessageSuccess('Approve success !');\n        setIsApprove(true);\n        setApproving(false);\n      })\n      .catch((err) => {\n        showMessageError(err.stack);\n        setApproving(false);\n      });\n  };\n\n  const getAllowance = async () => {\n    const wethSC = getContractWETH(library);\n    return wethSC.allowance(account, SC_MasterChef);\n  };\n\n  const toggleStake = () => {\n    setShowStake(!showStake);\n  };\n  const toggleWithdraw = () => {\n    setShowWithdraw(!showWithdraw);\n  };\n  const onSubmitStake = async (value) => {\n    if (value <= balanceWETH.toString()) {\n      // UI\n      setStaking(true);\n      setShowStake(false);\n      // Call\n      const myContract = getContractMasterChef(library);\n\n      myContract\n        .deposit(parseUnits(value, 18))\n        .then(async (res) => {\n          await res.wait();\n          showMessageSuccess('Stake success !');\n          setStaking(false);\n        })\n        .catch((err) => {\n          showMessageError(err.stack);\n          setStaking(false);\n        });\n    }\n  };\n  const onSubmitWithdraw = async (value) => {\n    if (value <= yourStakeWETH.toString()) {\n      // UI\n      setWithdrawing(true);\n      setShowWithdraw(false);\n      // Call\n      const myContract = getContractMasterChef(library);\n\n      myContract\n        .withdraw(parseUnits(value, 18))\n        .then(async (res) => {\n          await res.wait();\n          showMessageSuccess('Withdraw WETH success !');\n          setWithdrawing(false);\n        })\n        .catch((err) => {\n          showMessageError(err.stack);\n          setWithdrawing(false);\n        });\n    }\n  };\n\n  return (\n    <Container>\n      <Message setting={msg} />\n      <Card>\n        <CardHeader>\n          <Row className=\"justify-content-between align-items-center\">\n            <Col>\n              <b>Stake token</b>\n            </Col>\n            <Col className=\"text-right\">{!account && <ConnectWallet />}</Col>\n          </Row>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col sm={12}>\n              Wallet address: <b>{renderAccount()}</b>\n              {account && (\n                <Badge\n                  href=\"#\"\n                  color=\"danger\"\n                  className=\"ml-2\"\n                  onClick={() => {\n                    deactivate();\n                  }}\n                >\n                  Logout\n                </Badge>\n              )}\n            </Col>\n            <Col className=\"mt-2\">\n              Network: <b>{CHAIN_LIST[chainId]}</b>\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col sm={12}>\n              Balance:{' '}\n              <b>{formatAmount.format(formatEther(balanceWETH))} WETH</b>\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col sm={12}>\n              Balance: <b>{formatAmount.format(formatEther(balanceDD2))} DD2</b>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-between align-items-center\">\n            <Col>\n              Token earned:{' '}\n              <b>{formatAmount.format(formatEther(pendingDD2))} DD2</b>\n            </Col>\n            <Col className=\"text-sm-right\" sm=\"4\" xs={12}>\n              <Button\n                color=\"success\"\n                onClick={onClickHarvest}\n                disabled={harvesting || !account}\n              >\n                Harvest {harvesting && <Spinner size=\"sm\" color=\"light\" />}\n              </Button>\n            </Col>\n          </Row>\n          <Row className=\"mt-3\">\n            {!isApprove ? (\n              <Col>\n                <Button\n                  size=\"lg\"\n                  color=\"primary\"\n                  block\n                  onClick={onClickApprove}\n                  disabled={approving || !account}\n                >\n                  Approve {approving && <Spinner size=\"sm\" color=\"light\" />}\n                </Button>\n              </Col>\n            ) : (\n              <>\n                <Col>\n                  <Button\n                    size=\"lg\"\n                    className=\"w-100\"\n                    color=\"primary\"\n                    onClick={toggleStake}\n                    disabled={staking}\n                  >\n                    Stake {staking && <Spinner size=\"sm\" color=\"light\" />}\n                  </Button>\n                </Col>\n                <Col>\n                  <Button\n                    size=\"lg\"\n                    className=\"w-100\"\n                    onClick={toggleWithdraw}\n                    disabled={withdrawing}\n                  >\n                    Withdraw{' '}\n                    {withdrawing && <Spinner size=\"sm\" color=\"light\" />}\n                  </Button>\n                </Col>\n              </>\n            )}\n          </Row>\n          {/*  */}\n          <ListGroup className=\"mt-3\" horizontal>\n            <ListGroupItem action>Share of pool</ListGroupItem>\n            <ListGroupItem action>\n              {!totalStakeWETH.eq(0)\n                ? Math.round(\n                    (Number(yourStakeWETH.toString()) /\n                      Number(totalStakeWETH.toString())) *\n                      100\n                  ) + ' %'\n                : '0 %'}\n            </ListGroupItem>\n          </ListGroup>\n          <ListGroup className=\"mt-3\" horizontal>\n            <ListGroupItem action>Your stake</ListGroupItem>\n            <ListGroupItem action>\n              {`${formatAmount.format(formatEther(yourStakeWETH))} WETH`}\n            </ListGroupItem>\n          </ListGroup>\n          <ListGroup className=\"mt-3\" horizontal>\n            <ListGroupItem action>Total stake</ListGroupItem>\n            <ListGroupItem action>\n              {`${formatAmount.format(formatEther(totalStakeWETH))} WETH`}\n            </ListGroupItem>\n          </ListGroup>\n        </CardBody>\n      </Card>\n\n      {/* Popup */}\n      <PopupStake\n        show={showStake}\n        balance={formatEther(balanceWETH)}\n        onToggle={toggleStake}\n        onSubmit={onSubmitStake}\n      />\n      <PopupWithdraw\n        show={showWithdraw}\n        balance={formatEther(pendingDD2)}\n        onToggle={toggleWithdraw}\n        onSubmit={onSubmitWithdraw}\n      />\n    </Container>\n  );\n}\n\nStake.propTypes = {};\n\nexport default Stake;\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { injected } from 'utils/connect'\n\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}\n","import './App.css';\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport Stake from 'features/Stake';\n\nfunction getLibrary(provider, connector) {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library; // this will vary according to whether you use e.g. ethers or web3.js\n}\n\nfunction App() {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      {/* <ConnectWallet /> */}\n      <Stake />\n    </Web3ReactProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}